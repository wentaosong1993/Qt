<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>Widget</class>
 <widget class="QWidget" name="Widget">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>886</width>
    <height>814</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>Widget</string>
  </property>
  <widget class="QPushButton" name="pushButton">
   <property name="geometry">
    <rect>
     <x>160</x>
     <y>120</y>
     <width>75</width>
     <height>23</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true">QPushButton {
      background-color: red;
      border-style: outset;
      border-width: 2px;
      border-color: beige;
  }

QPushButton:pressed {
      background-color: rgb(224, 0, 0);
      border-style: inset;
  }

QPushButton::menu-indicator {
      subcontrol-position: right center;
      subcontrol-origin: padding;
      left: -2px;
  }
</string>
   </property>
   <property name="text">
    <string>PushButton</string>
   </property>
  </widget>
  <widget class="QCheckBox" name="checkBox">
   <property name="geometry">
    <rect>
     <x>60</x>
     <y>50</y>
     <width>71</width>
     <height>16</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true">QCheckBox {
      spacing: 5px;
  }

  QCheckBox::indicator {
      width: 13px;
      height: 13px;
  }

  QCheckBox::indicator:unchecked {
      image: url(:/Image/checkbox_unchecked.png);
  }

  QCheckBox::indicator:unchecked:hover {
      image: url(:/Image/checkbox_unchecked_hover.png);
  }

  QCheckBox::indicator:unchecked:pressed {
      image: url(:/Image/checkbox_unchecked_pressed.png);
  }

  QCheckBox::indicator:checked {
      image: url(:/Image/checkbox_checked.png);
  }

  QCheckBox::indicator:checked:hover {
      image: url(:/Image/checkbox_checked_hover.png);
  }

  QCheckBox::indicator:checked:pressed {
      image: url(:/Image/checkbox_checked_pressed.png);
  }

  QCheckBox::indicator:indeterminate:hover {
      image: url(:/Image/checkbox_indeterminate_hover.png);
  }

  QCheckBox::indicator:indeterminate:pressed {
      image: url(:/Image/checkbox_indeterminate_pressed.png);
  }</string>
   </property>
   <property name="text">
    <string>CheckBox</string>
   </property>
  </widget>
  <widget class="QLineEdit" name="lineEdit">
   <property name="geometry">
    <rect>
     <x>150</x>
     <y>50</y>
     <width>113</width>
     <height>20</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true"> QLineEdit {
      border: 2px solid gray;
      border-radius: 10px;
      padding: 0 8px;
      background: yellow;
      selection-background-color: darkgray;
  }</string>
   </property>
   <property name="text">
    <string>fdsfsa</string>
   </property>
  </widget>
  <widget class="QGroupBox" name="groupBox">
   <property name="geometry">
    <rect>
     <x>320</x>
     <y>110</y>
     <width>241</width>
     <height>131</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true">QGroupBox {
      background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                        stop: 0 #E0E0E0, stop: 1 #FFFFFF);
      border: 2px solid gray;
      border-radius: 5px;
      margin-top: 1ex; /* leave space at the top for the title */
  }

  QGroupBox::title {
      subcontrol-origin: margin;
      subcontrol-position: top center; /* position at the top center */
      padding: 0 3px;
      background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                        stop: 0 #FF0ECE, stop: 1 #FFFFFF);
  }</string>
   </property>
   <property name="title">
    <string>Helloworld</string>
   </property>
  </widget>
  <widget class="QGroupBox" name="groupBox_2">
   <property name="geometry">
    <rect>
     <x>50</x>
     <y>160</y>
     <width>221</width>
     <height>141</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true">QGroupBox::indicator {
      width: 13px;
      height: 13px;
  }

  QGroupBox::indicator:unchecked {
      image: url(:/Images/checkbox_unchecked.png);
  }</string>
   </property>
   <property name="title">
    <string>GroupBox</string>
   </property>
  </widget>
  <widget class="QProgressBar" name="progressBar">
   <property name="geometry">
    <rect>
     <x>150</x>
     <y>390</y>
     <width>118</width>
     <height>23</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true">QProgressBar {
   border: 2px solid grey;
   border-radius: 5px;
   text-align: center;
  }

QProgressBar::chunk {
   background-color: #05B8CC;
   width: 20px;
   margin: 0.5px;
  }</string>
   </property>
   <property name="value">
    <number>24</number>
   </property>
  </widget>
  <widget class="QPushButton" name="pushButton_2">
   <property name="geometry">
    <rect>
     <x>360</x>
     <y>320</y>
     <width>84</width>
     <height>23</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true">QPushButton {
      border: 2px solid #8f8f91;
      border-radius: 6px;
      background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                        stop: 0 #f6f7fa, stop: 1 #dadbde);
      min-width: 80px;
  }


  QPushButton:pressed {
      background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                        stop: 0 #dadbde, stop: 1 #f6f7fa);
  }</string>
   </property>
   <property name="text">
    <string>PushButton</string>
   </property>
  </widget>
  <widget class="QPushButton" name="pushButton_3">
   <property name="geometry">
    <rect>
     <x>360</x>
     <y>360</y>
     <width>75</width>
     <height>23</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true">
  QPushButton:flat {
      border: none; /* no border for a flat push button */
  }</string>
   </property>
   <property name="text">
    <string>PushButton</string>
   </property>
  </widget>
  <widget class="QPushButton" name="pushButton_4">
   <property name="geometry">
    <rect>
     <x>370</x>
     <y>410</y>
     <width>75</width>
     <height>23</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true">
  QPushButton:default {
      border-color: navy; /* make the default button prominent */
  }</string>
   </property>
   <property name="text">
    <string>PushButton</string>
   </property>
  </widget>
  <widget class="QPushButton" name="pushButton_5">
   <property name="geometry">
    <rect>
     <x>200</x>
     <y>460</y>
     <width>75</width>
     <height>23</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true">PushButton:open { /* when the button has its menu open */
      background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                        stop: 0 #dadbde, stop: 1 #f6f7fa);
  }

  QPushButton::menu-indicator {
      image: url(menu_indicator.png);
      subcontrol-origin: padding;
      subcontrol-position: bottom right;
  }

  QPushButton::menu-indicator:pressed, QPushButton::menu-indicator:open {
      position: relative;
      top: 2px; left: 2px; /* shift the arrow by 2 px */
  }

  QToolTip {
      border: 2px solid darkkhaki;
      padding: 5px;
      border-radius: 3px;
	  text: &quot;Hello&quot;;
  }</string>
   </property>
   <property name="text">
    <string>PushButton</string>
   </property>
  </widget>
  <widget class="QRadioButton" name="radioButton">
   <property name="geometry">
    <rect>
     <x>100</x>
     <y>500</y>
     <width>89</width>
     <height>16</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true">QRadioButton::indicator {
      width: 13px;
      height: 13px;
  }

  QRadioButton::indicator::unchecked {
      image: url(:/Image/radiobutton_unchecked.png);
  }

  QRadioButton::indicator:unchecked:hover {
      image: url(:/Image/radiobutton_unchecked_hover.png);
  }

  QRadioButton::indicator:unchecked:pressed {
      image: url(:/Image/radiobutton_unchecked_pressed.png);
  }

  QRadioButton::indicator::checked {
      image: url(:/Image/radiobutton_checked.png);
  }

  QRadioButton::indicator:checked:hover {
      image: url(:/Image/radiobutton_checked_hover.png);
  }

  QRadioButton::indicator:checked:pressed {
      image: url(:/Image/radiobutton_checked_pressed.png);
  }</string>
   </property>
   <property name="text">
    <string>RadioButton</string>
   </property>
  </widget>
  <widget class="QScrollBar" name="horizontalScrollBar">
   <property name="geometry">
    <rect>
     <x>410</x>
     <y>270</y>
     <width>160</width>
     <height>16</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true"> QScrollBar:vertical {
       border: 2px solid grey;
       background: #32CC99;
       width: 15px;
       margin: 22px 0 22px 0;
   }
   QScrollBar::handle:vertical {
       background: white;
       min-height: 20px;
   }
   QScrollBar::add-line:vertical {
       border: 2px solid grey;
       background: #32CC99;
       height: 20px;
       subcontrol-position: bottom;
       subcontrol-origin: margin;
   }

   QScrollBar::sub-line:vertical {
       border: 2px solid grey;
       background: #32CC99;
       height: 20px;
       subcontrol-position: top;
       subcontrol-origin: margin;
   }
   QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical {
       border: 2px solid grey;
       width: 3px;
       height: 3px;
       background: white;
   }

   QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
       background: none;
   }</string>
   </property>
   <property name="orientation">
    <enum>Qt::Horizontal</enum>
   </property>
  </widget>
  <widget class="QScrollBar" name="verticalScrollBar">
   <property name="geometry">
    <rect>
     <x>520</x>
     <y>340</y>
     <width>16</width>
     <height>160</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true"> QScrollBar:vertical {
       border: 2px solid grey;
       background: #32CC99;
       width: 15px;
       margin: 22px 0 22px 0;
   }
   QScrollBar::handle:vertical {
       background: white;
       min-height: 20px;
   }
   QScrollBar::add-line:vertical {
       border: 2px solid grey;
       background: #32CC99;
       height: 20px;
       subcontrol-position: bottom;
       subcontrol-origin: margin;
   }

   QScrollBar::sub-line:vertical {
       border: 2px solid grey;
       background: #32CC99;
       height: 20px;
       subcontrol-position: top;
       subcontrol-origin: margin;
   }
   QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical {
       border: 2px solid grey;
       width: 3px;
       height: 3px;
       background: white;
   }

   QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
       background: none;
   }</string>
   </property>
   <property name="orientation">
    <enum>Qt::Vertical</enum>
   </property>
  </widget>
  <widget class="QSlider" name="horizontalSlider">
   <property name="geometry">
    <rect>
     <x>350</x>
     <y>40</y>
     <width>160</width>
     <height>19</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true">  QSlider::groove:horizontal {
      border: 1px solid #999999;
      height: 8px; /* the groove expands to the size of the slider by default. by giving it a height, it has a fixed size */
      background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #B1B1B1, stop:1 #c4c4c4);
      margin: 2px 0;
  }

  QSlider::handle:horizontal {
      background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #b4b4b4, stop:1 #8f8f8f);
      border: 1px solid #5c5c5c;
      width: 18px;
      margin: -2px 0; /* handle is placed by default on the contents rect of the groove. Expand outside the groove */
      border-radius: 3px;
  }</string>
   </property>
   <property name="orientation">
    <enum>Qt::Horizontal</enum>
   </property>
  </widget>
  <widget class="QSlider" name="verticalSlider">
   <property name="geometry">
    <rect>
     <x>50</x>
     <y>330</y>
     <width>19</width>
     <height>160</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true">QSlider::groove:vertical {
      background: red;
      position: absolute; /* absolutely position 4px from the left and right of the widget. setting margins on the widget should work too... */
      left: 4px; right: 4px;
  }

  QSlider::handle:vertical {
      height: 10px;
      background: green;
      margin: 0 -4px; /* expand outside the groove */
  }

  QSlider::add-page:vertical {
      background: white;
  }

  QSlider::sub-page:vertical {
      background: pink;
  }</string>
   </property>
   <property name="orientation">
    <enum>Qt::Vertical</enum>
   </property>
  </widget>
  <widget class="QSpinBox" name="spinBox">
   <property name="geometry">
    <rect>
     <x>190</x>
     <y>320</y>
     <width>121</width>
     <height>22</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true">QSpinBox {
      padding-right: 15px; /* make room for the arrows */
      border-image: url(:Image/frame.png) 4;
      border-width: 3;
  }

  QSpinBox::up-button {
      subcontrol-origin: border;
      subcontrol-position: top right; /* position at the top right corner */

      width: 16px; /* 16 + 2*1px border-width = 15px padding + 3px parent border */
      border-image: url(:/Image/spinup.png) ;
      border-width: 1px;
  }

  QSpinBox::up-button:hover {
      border-image: url(:/Image/spinup_hover.png) 1;
  }

  QSpinBox::up-button:pressed {
      border-image: url(:/Image/spinup_pressed.png) 1;
  }

  QSpinBox::up-arrow {
      image: url(:/Image/up_arrow.png);
      width: 7px;
      height: 7px;
  }

  QSpinBox::up-arrow:disabled, QSpinBox::up-arrow:off { /* off state when value is max */
     image: url(:/Image/up_arrow_disabled.png);
  }

  QSpinBox::down-button {
      subcontrol-origin: border;
      subcontrol-position: bottom right; /* position at bottom right corner */

      width: 16px;
      border-image: url(:/Image/spindown.png) 1;
      border-width: 1px;
      border-top-width: 0;
  }

  QSpinBox::down-button:hover {
      border-image: url(:/Image/spindown_hover.png) 1;
  }

  QSpinBox::down-button:pressed {
      border-image: url(:/Image/spindown_pressed.png) 1;
  }

  QSpinBox::down-arrow {
      image: url(:/Image/down_arrow.png);
      width: 7px;
      height: 7px;
  }

  QSpinBox::down-arrow:disabled,
  QSpinBox::down-arrow:off { /* off state when value in min */
     image: url(:/Image/down_arrow_disabled.png);
  }</string>
   </property>
  </widget>
  <widget class="QPushButton" name="pushButtonreturn">
   <property name="geometry">
    <rect>
     <x>150</x>
     <y>530</y>
     <width>419</width>
     <height>14</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true">.QPushButton{font: 14px;color: #ffffff;background-color:#29a1f7;border:0px;border-radius:2px;}
.QPushButton:hover{background-color:#4ab0fb;border:0px;border-radius:2px;}
.QPushButton:pressed{background-color:#2087d3;border:0px;border-radius:2px;}</string>
   </property>
   <property name="text">
    <string>返回上一级</string>
   </property>
  </widget>
  <widget class="QKeySequenceEdit" name="keySequenceEdit">
   <property name="geometry">
    <rect>
     <x>450</x>
     <y>10</y>
     <width>113</width>
     <height>20</height>
    </rect>
   </property>
  </widget>
  <widget class="QTabWidget" name="tabWidget">
   <property name="geometry">
    <rect>
     <x>110</x>
     <y>590</y>
     <width>221</width>
     <height>111</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true">QTabWidget::pane { /* The tab widget frame */
      border-top: 2px solid #C2C7CB;
  }

  QTabWidget::tab-bar {
      left: 5px; /* move to the right by 5px */
  }

  /* Style the tab using the tab sub-control. Note that
      it reads QTabBar _not_ QTabWidget */
  QTabBar::tab {
      background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                  stop: 0 #E1E1E1, stop: 0.4 #DDDDDD,
                                  stop: 0.5 #D8D8D8, stop: 1.0 #D3D3D3);
      border: 2px solid #C4C4C3;
      border-bottom-color: #C2C7CB; /* same as the pane color */
      border-top-left-radius: 4px;
      border-top-right-radius: 4px;
      min-width: 8ex;
      padding: 2px;
  }

  QTabBar::tab:selected, QTabBar::tab:hover {
      background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                  stop: 0 #fafafa, stop: 0.4 #f4f4f4,
                                  stop: 0.5 #e7e7e7, stop: 1.0 #fafafa);
  }

  QTabBar::tab:selected {
      border-color: #9B9B9B;
      border-bottom-color: #C2C7CB; /* same as pane color */
  }

  QTabBar::tab:!selected {
      margin-top: 2px; /* make non-selected tabs look smaller */
  }

QTabBar::tear {
      image: url(tear_indicator.png);
  }

  QTabBar::scroller { /* the width of the scroll buttons */
      width: 20px;
  }</string>
   </property>
   <property name="currentIndex">
    <number>0</number>
   </property>
   <widget class="QWidget" name="tab">
    <attribute name="title">
     <string>Tab 1</string>
    </attribute>
   </widget>
   <widget class="QWidget" name="tab_2">
    <attribute name="title">
     <string>Tab 2</string>
    </attribute>
   </widget>
  </widget>
  <widget class="QTabWidget" name="tabWidget_2">
   <property name="geometry">
    <rect>
     <x>460</x>
     <y>600</y>
     <width>127</width>
     <height>80</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true">QTabWidget::pane { /* The tab widget frame */
      border-top: 2px solid #C2C7CB;
      position: absolute;
      top: -0.5em;
  }

  QTabWidget::tab-bar {
      alignment: center;
  }

  /* Style the tab using the tab sub-control. Note that
      it reads QTabBar _not_ QTabWidget */
  QTabBar::tab {
      background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                  stop: 0 #E1E1E1, stop: 0.4 #DDDDDD,
                                  stop: 0.5 #D8D8D8, stop: 1.0 #D3D3D3);
      border: 2px solid #C4C4C3;
      border-bottom-color: #C2C7CB; /* same as the pane color */
      border-top-left-radius: 4px;
      border-top-right-radius: 4px;
      min-width: 8ex;
      padding: 2px;
  }

  QTabBar::tab:selected, QTabBar::tab:hover {
      background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                  stop: 0 #fafafa, stop: 0.4 #f4f4f4,
                                  stop: 0.5 #e7e7e7, stop: 1.0 #fafafa);
  }

  QTabBar::tab:selected {
      border-color: #9B9B9B;
      border-bottom-color: #C2C7CB; /* same as pane color */
  }

QTabBar::tear {
      image: url(tear_indicator.png);
  }

  QTabBar::scroller { /* the width of the scroll buttons */
      width: 20px;
  }

  QTabBar QToolButton { /* the scroll buttons are tool buttons */
      border-image: url(scrollbutton.png) 2;
      border-width: 2px;
  }

  QTabBar QToolButton::right-arrow { /* the arrow mark in the tool buttons */
      image: url(rightarrow.png);
  }

  QTabBar QToolButton::left-arrow {
      image: url(leftarrow.png);
  }

 QTabBar::close-button {
      image: url(close.png)
      subcontrol-position: left;
  }
  QTabBar::close-button:hover {
      image: url(close-hover.png)
  }</string>
   </property>
   <property name="currentIndex">
    <number>0</number>
   </property>
   <widget class="QWidget" name="tab_3">
    <attribute name="title">
     <string>Tab 1</string>
    </attribute>
   </widget>
   <widget class="QWidget" name="tab_4">
    <attribute name="title">
     <string>Tab 2</string>
    </attribute>
   </widget>
  </widget>
 </widget>
 <layoutdefault spacing="6" margin="11"/>
 <resources/>
 <connections/>
</ui>
